선언, 할당, 범위, 호이스팅

자바스크립트는 변수나 함수를 선언하면 Hoisting이라는 현상이 일어난다.
-> 변수의 호이스팅 현상
변수의 선언을 변수 범위 맨 위로 끌고와서 가장 먼저 해석하는 현상
(자바스크립트 언어 자체가 그럼)

console.log(나이); // 아직 변수 선언 안했는데 먼저 출력하면 error가 떠야하지만 호이스팅 현상으로 undefined가 출력됨.
var 나이 = 30;
console.log(나이); // 값을 줬으니 30출력

- 함수 만들 때도 호이스팅이 일어난다. 

-var : hoisting시 undefined 할당 됨
-let,const : hoisting시 undefined 할당 안됨

◆ 변수 동시에 여러개 만들기 
변수를 콤마로 구분하면 여러 개를 동시에 만들 수 있음.
(선언과 동시에 값도 줄 수 있다.) 

var 나이 = 20, 이름 = 'kim', 성별;

---------------------------------------------------------------------------------

◆ 전역변수 : 모든 곳에서 쓸 수 있는 변수

var 나이 = 20; //바깥
function 함수(){
    console.log(나이); //안
}
함수();

- 바깥에 있는 변수값은 안에서 자유롭게 쓸 수 있다. 

function 함수(){
    var 나이 = 20;  //안에서 씀. 지역변수
    console.log(나이);
}
함수();

◆ window로 전역변수 만들기. 좀 더 권장하는 방식.
window는 자바스크립트 기본 함수를 담은 {오브젝트}

window.이름 = '김'; // 이 안에 함수도 들어갈 수 있고 값을 넣어준다. 
console.log(이름);
console.log(window.이름);

---------------------------------------------------------------------------------
연습예제1)

if(true){
    let a = 1;
    var b = 2;
    if(true){
        let b = 3;
    }
    console.log(b); 
}

어떤게 출력될까? let = b는 {}안에서만 살기 떄문에 b는 2가 출력 된다. 

---------------------------------------------------------------------------------
연습예제2)

함수();
function 함수() {
  console.log(안녕);
  let 안녕 = 'Hello!';
} 

- 함수실행은 함수선언 전에 해도 된다. 
- 뭐가 출력됨? error가 남. 

- 왜 undefined가 아닐까?
var은 가능한데 let,const는 안됨.
let,const는 호이스팅시에 자동으로 undefined가 자동으로 할당이 안 된다. 
let,const는 실수를 방지해 주는 변수다.
---------------------------------------------------------------------------------
연습예제3)

함수();
var 함수 = function() {
  console.log(안녕);
  var 안녕 = 'Hello!';
} 

- 변수의 선언 부분인 var 함수; 만 호이스팅이 된다.

- function 함수(){} : 전부가 Hoisting 됨
- var 함수 = function(){} : 선언 부분만 Hoisting

- var 함수; 호이스팅 된 게 변수기 때문에 함수를 실행하는 함수()가 함수가 아니라고 에러남.
---------------------------------------------------------------------------------
연습예제4)

let a = 1;
var 함수 = function() {
  a = 2;
}
console.log(a);

- 1이 출력된다. 함수를 만들기만 하고 실행은 하지 않았기 때문이다.
- 함수(); 후에 console.log(a); 하면 2가 출력됨.
---------------------------------------------------------------------------------
연습예제5)

let a = 1;
var b = 2;
window.a = 3;
window.b = 4;
console.log(a + b);

- b는 var b 와 window.b 가 동일한 기능이기 때문에재할당 되어 4가 출력됨
- a는 1이 출력됨. 
let변수와 글로벌 변수 중에 조금 더 범위가 작고 가까운 것을 참조한다.
자바스크립트 변수를 사용할 때 참조할만한 변수가 내 주변에 없으면 계속 상위 중괄호로 시선을 돌리면서 참조한다.

---------------------------------------------------------------------------------
연습예제6)

for (var i = 1; i < 6; i++) { 
    setTimeout(function() { console.log(i); }, i*1000 ); 
  }

- 5만 나온다 왜?
- 반복문과 setTimeout은 동시에 실행되지 않음. 몇 초 후에 실행이 된다.
먼저 반복문이 다 실행된 후, var i = 5; 값은 전역변수로 남는다.
그래서 setTimeout에 var i = 5를 넣어서 돌리게 됨.

- 그래서 let변수를 사용해줘야 한다.
let의 범위는 {} 안이기 때문에 for반복문 내에서 let i = 0 을 가져다 쓰게 된다. 
---------------------------------------------------------------------------------
연습예제7)

var 버튼들 = document.querySelectorAll('button');
var 모달창들 = document.querySelectorAll('div');

for (var i = 0; i < 3; i++){

  버튼들[i].addEventListener('click', function(){
    모달창들[i].style.display = 'block';
  });

}

- 동작 안됨. 왜?
- 반복문이 도는 시점과 아래 코드가 도는 시점이 다르기 때문이다. 위와 같은 문제.
- 반복문 내 코드 3번 돌림-> 이벤트리스너 내부코드는 나중에 실행함 -> 좀 이따가 버튼 클릭하면 내부코드실행
그럼 남아있는건 var i = 3 인데 모달창은 3개뿐이라 3이 없어서 에러남.
- var를 let으로 바꾸면 됨.


